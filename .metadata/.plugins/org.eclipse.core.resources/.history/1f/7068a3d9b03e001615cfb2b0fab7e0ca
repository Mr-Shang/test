package Graph;

/**
 * 一个具有n个顶点的图G，可以将图G的临接矩阵存储在一个二维数组中。
 * 
 * @author 东
 *
 */
public class MGraph implements IGraph {
	public final static int INFINITY = Integer.MAX_VALUE;
	private GraphKind kind;// 图的种类标志
	private int vexNum, arcNum;// 图的当前顶点数和边数
	private Object[] vexs;// 顶点
	private int[][] arcs;// 临阶矩阵

	public MGraph() {
		this(null, 0, 0, null, null);
	}

	public MGraph(GraphKind kind, int vexNum, int arcNum, Object[] vexs, int[][] arcs) {
		super();
		this.kind = kind;
		this.vexNum = vexNum;
		this.arcNum = arcNum;
		this.vexs = vexs;
		this.arcs = arcs;
	}

	// 创建图
	@Override
	public void createGraph() {
		// TODO Auto-generated method stub

	}

	// 创建无向图
	public void createUDG() {

	};

	// 创建有向图
	public void createDG() {

	};

	// 创建无向网
	public void createUDN() {

	}

	// 创建有向网
	public void createDN() {

	}

	// 返回顶点数
	@Override
	public int getVexNum() {
		// TODO Auto-generated method stub
		return 0;
	}

	// 返回边数
	@Override
	public int getArcNum() {
		// TODO Auto-generated method stub
		return 0;
	}

	// 返回v表示的结点值，0<=v<=vexnum
	@Override
	public Object getVex(int v) throws Exception{
		if (v<0&&v>=vexNum) {
			throw new Exception("第"+v+"个顶点不存在！");
		}
		return null;
	}

	// 给定顶点的值vex，返回其在图中的位置，如果图中不包含此顶点，则返回-1.
	@Override
	public int locateVex(Object vex) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	// 返回v的第一个邻接点，若v没有邻接点，则返回-1，0<=v<=vexnum
	@Override
	public int firstAdjVex(int v)  throws Exception{
		// TODO Auto-generated method stub
		return 0;
	}

	// 返回v相对于w的下一个邻接点，若w是v的最后一个邻接点，则返回-1，其中0<v,w<vexnum
	@Override
	public int nextAdjVex(int v, int w) {
		// TODO Auto-generated method stub
		return 0;
	}

	public GraphKind getKind() {
		return kind;
	}

	public void setKind(GraphKind kind) {
		this.kind = kind;
	}

	public Object[] getVexs() {
		return vexs;
	}

	public void setVexs(Object[] vexs) {
		this.vexs = vexs;
	}

	public int[][] getArcs() {
		return arcs;
	}

	public void setArcs(int[][] arcs) {
		this.arcs = arcs;
	}
	

}
